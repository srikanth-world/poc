Certainly! Below are the full code examples for each file, including the RoutePrefix and specific routes.
WebApiConfig.cs (App_Start)
csharpCopy
using System.Web.Http;

namespace BAML.GMOT.CHILD.Reporting.Web.Areas.GTS
{
    public static class WebApiConfig
    {
        public static void Register(HttpConfiguration config)
        {
            // Enable attribute routing.
            config.MapHttpAttributeRoutes();

            // Web API routes
            config.Routes.MapHttpRoute(
                name: "DefaultApi",
                routeTemplate: "api/{controller}/{id}",
                defaults: new { id = RouteParameter.Optional }
            );
        }
    }
}
BaseSearchableController.cs
csharpCopy
using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Web.Http;

namespace BAML.GMOT.CHILD.Reporting.Web.Areas.GTS.Controllers
{
    public abstract class BaseSearchableController<TManager, TModel, TCriteria> : ApiController
        where TManager : class
        where TModel : class
    {
        protected abstract TManager Manager { get; }

        protected virtual IHttpActionResult GetActionResult(SearchModel<TCriteria, TModel> model)
        {
            try
            {
                var result = Manager.Search(model);
                return Ok(result);
            }
            catch (Exception ex)
            {
                return InternalServerError(ex);
            }
        }

        protected virtual IHttpActionResult GetActionResult(TModel result)
        {
            try
            {
                return Ok(result);
            }
            catch (Exception ex)
            {
                return InternalServerError(ex);
            }
        }
    }
}
AMLSanctionListMakerController.cs
csharpCopy
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using BAML.GMOT.CHILD.Reporting.Web.Common;
using BAML.GMOT.CHILD.Reporting.Backend.Managers.GTS.Report;

namespace BAML.GMOT.CHILD.Reporting.Web.Areas.GTS.Controllers
{
    [RoutePrefix("api/gts/sanctionlist")]
    public class AMLSanctionListMakerController : BaseSearchableController<AMLSanctionListMakerManager, AMLSanctionListMakerManager.AMLSanctionListMaker, AMLSanctionListMakerManager.AMLSanctionListMakerCriteria>
    {
        private readonly AMLSanctionListMakerManager _manager;
        private readonly SystemManager _systemManager;

        public AMLSanctionListMakerController()
        {
            _manager = new AMLSanctionListMakerManager();
            _systemManager = new SystemManager();
        }

        protected override AMLSanctionListMakerManager Manager
        {
            get { return _manager; }
        }

        [HttpGet]
        [Route("getsanctionlist")]
        public IHttpActionResult GetSanctionList(string sortedBy, SortDirection? sortDirection, int? branchNo, string status, string modeType, DateTime? dateFrom, DateTime? dateTo)
        {
            var criteria = new AMLSanctionListMakerManager.AMLSanctionListMakerCriteria
            {
                ListName = "",
                ListStatus = status,
                ListType = modeType,
                UploadTimeFrom = dateFrom,
                UploadTimeTo = dateTo
            };

            var model = new SearchModel<AMLSanctionListMakerManager.AMLSanctionListMakerCriteria, AMLSanctionListMakerManager.AMLSanctionListMakerSummary>
            {
                Criteria = criteria,
                PagingEnabled = false,
                SortedBy = sortedBy,
                SortDirection = sortDirection ?? SortDirection.Asc
            };

            SetDefaultSearchCriteria(model);
            return GetActionResult(model);
        }

        protected override void SetDefaultSearchCriteria(SearchModel<AMLSanctionListMakerManager.AMLSanctionListMakerCriteria, AMLSanctionListMakerManager.AMLSanctionListMakerSummary> model)
        {
            if (model.Criteria == null)
                model.Criteria = new AMLSanctionListMakerManager.AMLSanctionListMakerCriteria();
            else
            {
                // Similar logic as in MVC controller
            }
            model.PagingEnabled = false;
            model.SortedBy = "id";
            model.SortDirection = SortDirection.Desc;
        }

        private SelectList[] GetStatusItems()
        {
            List<SelectListItem> list = new List<SelectListItem>();
            list.Add(new SelectListItem() { Text = "ALL", Value = "" });
            list.Add(new SelectListItem() { Text = "Init", Value = "Init" });
            list.Add(new SelectListItem() { Text = "Submitted", Value = "Submitted" });
            list.Add(new SelectListItem() { Text = "Approved", Value = "Approved" });
            list.Add(new SelectListItem() { Text = "Rejected", Value = "Rejected" });
            return list.ToArray();
        }

        private SelectList[] GetFileTypeItems()
        {
            List<SelectListItem> list = new List<SelectListItem>();
            list.Add(new SelectListItem() { Text = "All", Value = "" });
            foreach (var entity in _systemManager.GetDomainList("AML_LISTTYPE", null))
            {
                list.Add(new SelectListItem() { Text = entity.domainDescription, Value = entity.domainValue });
            }
            return list.ToArray();
        }
    }
}
Explanation
WebApiConfig.cs: This file configures the routing for your Web API. It enables attribute routing and sets up a default route template.
BaseSearchableController.cs: This is the base class that provides common functionality for searchable controllers. It includes methods for handling search models and returning HTTP results.
AMLSanctionListMakerController.cs: This is the specific controller for the AMLSanctionListMaker API. It includes a route prefix and specific routes for actions. It also includes methods for setting default search criteria and retrieving status and file type items.
By organizing your code into separate files and using attribute routing, you can create a clean and maintainable Web API project.
