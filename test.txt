using System;
using System.Collections.Generic;
using System.Web.Http;

public class TemplateController : ApiController
{
    [HttpGet]
    public IHttpActionResult GetTemplateInfos(SearchModel<EASTSTemplateCriteria, ApproveItem> model = null)
    {
        List<CorpFxConfig> templateInfos = ReportManager.GetTemplateInfos(CurrentUser, "Checker");
        
        if (model?.Criteria == null)
        {
            model.Criteria = new EASTSTemplateCriteria();
        }
        
        if (model.Criteria.UploadFrom == DateTime.MinValue)
        {
            model.Criteria.UploadFrom = ReportDate.AddDays(-1);
        }
        
        if (model.Criteria.UploadTo == DateTime.MinValue)
        {
            model.Criteria.UploadTo = ReportDate;
        }
        
        // Fetch data
        ReportManager.GetTemplateDetails(model, CurrentUser);
        
        return Ok(new { model, templateInfos, reportDate = ReportDate });
    }

    [HttpPost]
    public IHttpActionResult Approve(SearchModel<EASTSTemplateCriteria, ApproveItem> model, bool approved)
    {
        // You can handle approval logic here, then return the updated model
        return Ok(GetTemplateInfos(model));
    }

    [HttpPost]
    public IHttpActionResult GetDetails(SearchModel<EASTSTemplateCriteria, EASTSTemplate> model = null)
    {
        List<CorpFxConfig> templateInfos = ReportManager.GetTemplateInfos(CurrentUser);
        ViewBag.TemplateFields = ReportManager.GetSheetFields(model.Criteria.TemplateName);
        ViewBag.ReportDate = ReportDate;
        ViewBag.TemplateInfos = templateInfos;
        model.PagingEnabled = true;
        
        ReportManager.GetTemplateDataDetails(model);
        return Ok(model);
    }

    [HttpPost]
    public IHttpActionResult Export(SearchModel<EASTSTemplateCriteria, ApproveItem> model = null)
    {
        var result = ReportManager.GetExportData(model);
        var columnsDic = ReportManager.GetColumnsDic(model.Criteria.TemplateName);
        var data = Exporter.BreakDownExport(result, columnsDic);
        
        // Trigger file download, but you need to return a response with the file data
        var fileName = model.Criteria.TemplateName.Replace(" ", "_") + DateTime.Now.ToString("yyyyMMdd-HHmmssfff") + ".xls";
        DownLoadFileHelper.DownLoadFile(data, fileName);
        
        return Ok(new { message = "Exported successfully", fileName });
    }
}
