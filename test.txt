Certainly! Let’s break this down into two parts:

1. **Convert the MVC View to Angular**.
2. **Integrate the Angular app into the MVC project**.

---

### **1. Convert the MVC View to Angular**

The MVC view code you provided includes:
- A form with date pickers, dropdowns, and a grid.
- JavaScript functions for handling actions like `exportData`, `approve`, and `getDetails`.

We’ll convert this into an Angular component.

---

#### **Step 1: Create an Angular Component**

1. **Generate a New Angular Component**:
   - In your Angular app, generate a new component:
     ```bash
     ng generate component template
     ```

2. **Create the Template (HTML)**:
   - Replace the content of `template.component.html` with the following:

```html
<div class="container">
  <div class="row">
    <form (ngSubmit)="onSearch()">
      <table width="100%">
        <tr>
          <td>Upload From</td>
          <td><input type="date" [(ngModel)]="criteria.uploadFrom" name="uploadFrom" /></td>
          <td>Upload To</td>
          <td><input type="date" [(ngModel)]="criteria.uploadTo" name="uploadTo" /></td>
        </tr>
        <tr>
          <td>Template Name</td>
          <td>
            <select [(ngModel)]="criteria.templateName" name="templateName">
              <option *ngFor="let item of dropdownList" [value]="item.value">{{ item.text }}</option>
            </select>
          </td>
          <td>Approve Status</td>
          <td>
            <select [(ngModel)]="criteria.approveStatus" name="approveStatus">
              <option *ngFor="let status of approveStatus" [value]="status.value">{{ status.text }}</option>
            </select>
          </td>
        </tr>
      </table>
      <button type="submit" class="btn btn-primary">Search</button>
    </form>
  </div>

  <div *ngIf="results" style="height:360px; width:970px; overflow:auto">
    <table>
      <thead>
        <tr>
          <th>Approve Status</th>
          <th>Template Name</th>
          <th>File Name</th>
          <th>Uploader</th>
          <th>Upload Time</th>
          <th>Recorded Count</th>
          <th>Operation</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let item of results">
          <td>{{ item.approveStatus || 'Upload' }}</td>
          <td>{{ item.templateName }}</td>
          <td>{{ item.fileName }}</td>
          <td>{{ item.uploader }}</td>
          <td>{{ item.uploadTime }}</td>
          <td>{{ item.counter }}</td>
          <td>
            <button (click)="exportData(item.fileName)">Export</button>
            <button (click)="getDetails(item.fileName)">Details</button>
            <button *ngIf="item.approveStatus !== 'Upload'" (click)="approve(item.fileName, true)">Approve</button>
            <button *ngIf="item.approveStatus !== 'Upload'" (click)="approve(item.fileName, false)">Reject</button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>
```

---

#### **Step 2: Create the Component Logic (TypeScript)**

1. **Update `template.component.ts`**:
   - Replace the content of `template.component.ts` with the following:

```typescript
import { Component, OnInit } from '@angular/core';
import { ApiService } from '../api.service';

@Component({
  selector: 'app-template',
  templateUrl: './template.component.html',
  styleUrls: ['./template.component.css']
})
export class TemplateComponent implements OnInit {
  criteria = {
    uploadFrom: '',
    uploadTo: '',
    templateName: '',
    approveStatus: ''
  };

  dropdownList = [
    { text: 'Template 1', value: 'Template1' },
    { text: 'Template 2', value: 'Template2' }
  ];

  approveStatus = [
    { text: '-- ALL --', value: '1' },
    { text: 'Upload', value: 'Upload' },
    { text: 'Approved', value: 'Approved' },
    { text: 'Rejected', value: 'Rejected' }
  ];

  results: any[] = [];

  constructor(private apiService: ApiService) { }

  ngOnInit(): void {
    this.loadData();
  }

  loadData(): void {
    this.apiService.getTemplateData().subscribe(data => {
      this.results = data;
    });
  }

  onSearch(): void {
    this.apiService.searchTemplateData(this.criteria).subscribe(data => {
      this.results = data;
    });
  }

  exportData(filename: string): void {
    this.apiService.exportData(filename).subscribe(response => {
      // Handle file download
      const blob = new Blob([response], { type: 'application/vnd.ms-excel' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      a.click();
      window.URL.revokeObjectURL(url);
    });
  }

  getDetails(filename: string): void {
    this.apiService.getDetails(filename).subscribe(data => {
      // Handle details
      console.log(data);
    });
  }

  approve(filename: string, approve: boolean): void {
    const message = `Do you want to ${approve ? 'APPROVE' : 'REJECT'} file ${filename}?`;
    if (confirm(message)) {
      this.apiService.approve(filename, approve).subscribe(response => {
        this.loadData(); // Refresh data after approval
      });
    }
  }
}
```

---

#### **Step 3: Create the API Service**

1. **Generate a Service**:
   - In your Angular app, generate a service:
     ```bash
     ng generate service api
     ```

2. **Update `api.service.ts`**:
   - Replace the content of `api.service.ts` with the following:

```typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ApiService {
  private apiUrl = 'https://localhost:5001/api/GTS/Template'; // Your Web API URL

  constructor(private http: HttpClient) { }

  getTemplateData(): Observable<any> {
    return this.http.get(this.apiUrl);
  }

  searchTemplateData(criteria: any): Observable<any> {
    return this.http.post(`${this.apiUrl}/search`, criteria);
  }

  exportData(filename: string): Observable<any> {
    return this.http.post(`${this.apiUrl}/export`, { filename }, { responseType: 'blob' });
  }

  getDetails(filename: string): Observable<any> {
    return this.http.post(`${this.apiUrl}/details`, { filename });
  }

  approve(filename: string, approve: boolean): Observable<any> {
    return this.http.post(`${this.apiUrl}/approve`, { filename, approve });
  }
}
```

---

### **2. Integrate Angular into the MVC Project**

#### **Step 1: Build the Angular App**

1. Build the Angular app for production:
   ```bash
   ng build --prod
   ```

2. Copy the contents of the `dist/ClientApp` folder into the `wwwroot` folder of your MVC project.

#### **Step 2: Configure MVC to Serve Angular Files**

1. Open your MVC project’s `Startup.cs` file.
2. Add the following code to serve static files from the `wwwroot` folder:
   ```csharp
   public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
   {
       if (env.IsDevelopment())
       {
           app.UseDeveloperExceptionPage();
       }
       else
       {
           app.UseExceptionHandler("/Home/Error");
           app.UseHsts();
       }

       app.UseHttpsRedirection();
       app.UseStaticFiles(); // Serve static files (e.g., Angular files)
       app.UseRouting();

       app.UseEndpoints(endpoints =>
       {
           endpoints.MapControllerRoute(
               name: "default",
               pattern: "{controller=Home}/{action=Index}/{id?}");

           // Fallback route for Angular
           endpoints.MapFallbackToFile("index.html");
       });
   }
   ```

#### **Step 3: Run the Application**

1. Build and run your MVC app in Visual Studio or using the .NET CLI:
   ```bash
   dotnet run
   ```

2. Open your browser and navigate to the MVC app’s URL (e.g., `https://localhost:5001`).
3. The Angular app will be served from the `wwwroot` folder, and it will consume the Web API endpoints.

---

### **Summary**

- The MVC view has been converted into an Angular component.
- The Angular app is integrated into the MVC project by copying the production build to the `wwwroot` folder.
- The Angular app consumes the Web API endpoints you’ve already created.

Let me know if you need further assistance!
